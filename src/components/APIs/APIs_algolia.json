[
  {
    "objectID": "GET /v2/batchpayments/{batchPaymentId}",
    "path": "/v2/batchpayments/{batchPaymentId}",
    "method": "GET",
    "description": "Get the batch payment summary.",
    "parameters": [
      {
        "name": "batchPaymentId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique batch payment identifier"
      }
    ],
    "responses": {
      "200": "Batch Payment summary",
      "404": "Batch payment not found.",
      "500": "Unable to get the batch payment."
    },
    "tags": [
      "BatchPayments"
    ]
  },
  {
    "objectID": "GET /v2/batchpayments/{batchPaymentId}/entries",
    "path": "/v2/batchpayments/{batchPaymentId}/entries",
    "method": "GET",
    "description": "Method return all the Batch payment transactions based on batch payment id",
    "parameters": [
      {
        "name": "batchPaymentId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Batch Payment Id"
      }
    ],
    "responses": {
      "200": "List of batch payment entries",
      "404": "Batch payment not found.",
      "500": "Unable to get the batch payment."
    },
    "tags": [
      "BatchPayments"
    ]
  },
  {
    "objectID": "POST /v2/batchpayments",
    "path": "/v2/batchpayments",
    "method": "POST",
    "description": "This Method will be return to upload payments batch as a collection of json and process them",
    "parameters": [
      {
        "name": "batchPayment",
        "in": "body",
        "required": true,
        "type": "Reference to BatchPaymentRequest",
        "description": "collection of batchpayment entries inside a container"
      }
    ],
    "responses": {
      "201": "Batch payment created successfully",
      "300": "Duplicate merchant unique id. The response will have 'Location' header which will have the orginal batch payment.",
      "400": "Invalid batch payment details.",
      "500": "Something went wrong. Batch payment may or may not be created."
    },
    "tags": [
      "BatchPayments"
    ]
  },
  {
    "objectID": "GET /v2/cardproxies/{cardProxy}",
    "path": "/v2/cardproxies/{cardProxy}",
    "method": "GET",
    "description": "Get card proxy detail",
    "parameters": [
      {
        "name": "cardProxy",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Card proxy for which token response is required"
      }
    ],
    "responses": {
      "200": "Token response of the card proxy provided.",
      "400": "Invalid input detail.",
      "404": "Unable to find the token response for the card proxy provided."
    },
    "tags": [
      "CardProxies"
    ]
  },
  {
    "objectID": "DELETE /v2/cardproxies/{cardProxy}",
    "path": "/v2/cardproxies/{cardProxy}",
    "method": "DELETE",
    "description": "Delete card proxy permanently from the system. This will not affect \r\nany customer, registered using this proxy.",
    "parameters": [
      {
        "name": "cardProxy",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Card proxy which will be used for processing the payment"
      }
    ],
    "responses": {
      "204": "Card proxy deleted successfully.",
      "400": "Invalid input detail.",
      "404": "Unable to find the Card proxy provided."
    },
    "tags": [
      "CardProxies"
    ]
  },
  {
    "objectID": "GET /v2/cardproxies/{cardProxy}/pricing",
    "path": "/v2/cardproxies/{cardProxy}/pricing",
    "method": "GET",
    "description": "Get pricing for card proxy and payment amount",
    "parameters": [
      {
        "name": "cardProxy",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Card proxy which will be used for processing the payment"
      },
      {
        "name": "paymentAmount",
        "in": "query",
        "required": true,
        "type": "number",
        "description": "Payment amount to determine the pricing"
      }
    ],
    "responses": {
      "200": "Pricing response for card proxy and payment amount provided.",
      "400": "Invalid input detail.",
      "404": "Unable to find the pricing response for the card proxy provided."
    },
    "tags": [
      "CardProxies"
    ]
  },
  {
    "objectID": "POST /v2/cardproxies",
    "path": "/v2/cardproxies",
    "method": "POST",
    "description": "Generate card proxy. Not recommended for software / sites that are not PCI DSS compliant. For an easy and secure card tokenisation and payment option, see our Payment Plugin jQuery.",
    "parameters": [
      {
        "name": "card",
        "in": "body",
        "required": true,
        "type": "Reference to CardProxyRequest",
        "description": "Card details required to generate a card proxy"
      }
    ],
    "responses": {
      "201": "Card authorisation is successful.",
      "400": "Invalid input detail.",
      "403": "The credential provided doesn't support this endpoint.",
      "409": "Customer unique id is already used.",
      "412": "Tokenisation failed."
    },
    "tags": [
      "CardProxies"
    ]
  },
  {
    "objectID": "GET /v2/customers/{customerReference}",
    "path": "/v2/customers/{customerReference}",
    "method": "GET",
    "description": "Return the customer using the provided customer reference.",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Customer Reference provided by the merchant"
      }
    ],
    "responses": {
      "200": "Found the customer.",
      "400": "Invalid customer reference.",
      "404": "Unable to find the customer by the reference provided."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "GET /v2/customers/{customerReference}/status",
    "path": "/v2/customers/{customerReference}/status",
    "method": "GET",
    "description": "Get Customer status",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      }
    ],
    "responses": {
      "200": "Found the customer status.",
      "400": "Invalid customer reference.",
      "404": "Unable to find the customer by the reference provided."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "PUT /v2/customers/{customerReference}/status",
    "path": "/v2/customers/{customerReference}/status",
    "method": "PUT",
    "description": "Update the customer status",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      },
      {
        "name": "statusRequest",
        "in": "body",
        "required": true,
        "type": "Reference to CustomerStatusRequest",
        "description": "Contains details for updating the status of a customer, such as activating, deactivating, or altering customer status flags."
      }
    ],
    "responses": {
      "204": "Updated the customer payment option.",
      "400": "Invalid input detail.",
      "403": "Merchant is forbidden to perform this operation.",
      "500": "Something went wrong. Customer payment option may or may not be updated."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "GET /v2/customers/{customerReference}/account",
    "path": "/v2/customers/{customerReference}/account",
    "method": "GET",
    "description": "Get Customer credit / debit card or bank account",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      }
    ],
    "responses": {
      "200": "Found the customer account.",
      "400": "Invalid customer reference.",
      "404": "Unable to find the customer by the reference provided."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "PUT /v2/customers/{customerReference}/account",
    "path": "/v2/customers/{customerReference}/account",
    "method": "PUT",
    "description": "Update the customer account",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      },
      {
        "name": "account",
        "in": "body",
        "required": true,
        "type": "Reference to CustomerAccountRequest",
        "description": "Represents customer account information necessary for updates, including account type, status, and other pertinent financial details."
      }
    ],
    "responses": {
      "204": "Updated the customer account.",
      "400": "Invalid input detail.",
      "403": "Merchant is forbidden to perform this operation.",
      "500": "Something went wrong. Customer account may or may not be updated."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "GET /v2/customers/{customerReference}/profile",
    "path": "/v2/customers/{customerReference}/profile",
    "method": "GET",
    "description": "Get Customer profile",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      }
    ],
    "responses": {
      "200": "Found the customer profile.",
      "400": "Invalid customer reference.",
      "404": "Unable to find the customer by the reference provided."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "PUT /v2/customers/{customerReference}/profile",
    "path": "/v2/customers/{customerReference}/profile",
    "method": "PUT",
    "description": "Update the customer profile.",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      },
      {
        "name": "profile",
        "in": "body",
        "required": true,
        "type": "Reference to CustomerProfileRequest",
        "description": "Holds all relevant customer profile information that may be updated, such as contact information, preferences, and demographic data."
      }
    ],
    "responses": {
      "204": "Updated the customer profile.",
      "400": "Invalid input detail.",
      "403": "Merchant is forbidden to perform this operation.",
      "500": "Something went wrong. Customer may or may not be updated."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "GET /v2/customers/{customerReference}/paymentOption",
    "path": "/v2/customers/{customerReference}/paymentOption",
    "method": "GET",
    "description": "Get Customer payment option",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      }
    ],
    "responses": {
      "200": "Found the customer payment option.",
      "400": "Invalid customer reference.",
      "404": "Unable to find the customer by the reference provided."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "PUT /v2/customers/{customerReference}/paymentOption",
    "path": "/v2/customers/{customerReference}/paymentOption",
    "method": "PUT",
    "description": "Update the customer payment option",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      },
      {
        "name": "option",
        "in": "body",
        "required": true,
        "type": "Reference to CustomerPaymentOption",
        "description": "Details for CustomerPaymentOption (see schema definition)"
      }
    ],
    "responses": {
      "204": "Updated the customer payment option.",
      "400": "Invalid input detail.",
      "403": "Merchant is forbidden to perform this operation.",
      "500": "Something went wrong. Customer payment option may or may not be updated."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "GET /v2/customers",
    "path": "/v2/customers",
    "method": "GET",
    "description": "Return customers based on the filter provided.",
    "parameters": [
      {
        "name": "customerReference",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Customer reference"
      },
      {
        "name": "customerStatuses",
        "in": "query",
        "required": false,
        "type": "array",
        "description": "Customer statuses. Default is all. 0 - Open, 1 - AwaitingEmailVerfication, 2 - AwaitingSignature, 3 - SetUpIncomplete, 4 - Restricted, 5 - Closed, 6 - OnHold"
      },
      {
        "name": "fromOpenDate",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "From Customer open date. Format: yyyy-MM-dd"
      },
      {
        "name": "toOpenDate",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "To Customer open date. Format: yyyy-MM-dd"
      },
      {
        "name": "fromClosedDate",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "From Customer closed date. Format: yyyy-MM-dd"
      },
      {
        "name": "toClosedDate",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "To Customer closed date. Format: yyyy-MM-dd"
      },
      {
        "name": "paymentOptions",
        "in": "query",
        "required": false,
        "type": "array",
        "description": "Payment options. Default is all. 22 - AutoPay, 23 - EmailReminder, 24 - SmsReminder, 25 - FixedTerm, 26 - BatchPay, 27 - ScheduledPay, 28 - OneOff, 148 - PayID, 149 - BPAY"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Starting index of the record. An index starts from 0. Default = 0"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Page size. Default = 20. Maximum page size allowed = 2000"
      }
    ],
    "responses": {
      "200": "Return all the customers satisfies the filters.",
      "400": "Invalid get request.",
      "404": "Unable to find the customers by the filters provided.",
      "500": "Something went wrong. Please try again."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "POST /v2/customers",
    "path": "/v2/customers",
    "method": "POST",
    "description": "Create customer using the provided details",
    "parameters": [
      {
        "name": "newCustomer",
        "in": "body",
        "required": true,
        "type": "Reference to NewCustomer",
        "description": "Customer details to create in the system"
      }
    ],
    "responses": {
      "201": "Customer created successfully.",
      "300": "Duplicate customer reference.",
      "400": "Invalid input detail.",
      "403": "Merchant is forbidden to perform this operation.",
      "500": "Something went wrong. Customer may or may not be created."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "PUT /v2/customers/{customerReference}/customerReference",
    "path": "/v2/customers/{customerReference}/customerReference",
    "method": "PUT",
    "description": "Update the customer reference",
    "parameters": [
      {
        "name": "customerReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Old customer reference"
      },
      {
        "name": "newCustomerReference",
        "in": "body",
        "required": true,
        "type": "string",
        "description": "New customer reference"
      }
    ],
    "responses": {
      "204": "Updated the customer reference.",
      "400": "Invalid input detail.",
      "403": "Merchant is forbidden to perform this operation.",
      "500": "Something went wrong. Customer reference may or may not be updated."
    },
    "tags": [
      "Customers"
    ]
  },
  {
    "objectID": "GET /v2/diagnostics/ping",
    "path": "/v2/diagnostics/ping",
    "method": "GET",
    "description": "Ping method to get the server date time and version information",
    "parameters": [],
    "responses": {
      "200": "Batch Payment summary"
    },
    "tags": [
      "Diagnostics"
    ]
  },
  {
    "objectID": "GET /v2/payments/{paymentReference}",
    "path": "/v2/payments/{paymentReference}",
    "method": "GET",
    "description": "Returns Payment details based on Payment reference",
    "parameters": [
      {
        "name": "paymentReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Payment Reference"
      }
    ],
    "responses": {
      "200": "Found the payment.",
      "400": "Invalid payment reference.",
      "404": "Unable to find the payment by the reference provided."
    },
    "tags": [
      "Payments"
    ]
  },
  {
    "objectID": "GET /v2/payments/uniqueId/{merchantUniqueId}",
    "path": "/v2/payments/uniqueId/{merchantUniqueId}",
    "method": "GET",
    "description": "Returns Payment details based on merchant unique reference",
    "parameters": [
      {
        "name": "merchantUniqueId",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Merchant Unique Id. This is provided by the merchant when creating an payment."
      }
    ],
    "responses": {
      "200": "Found the payment.",
      "400": "Invalid payment reference.",
      "404": "Unable to find the payment by the reference provided."
    },
    "tags": [
      "Payments"
    ]
  },
  {
    "objectID": "GET /v2/payments/{paymentReference}/refundrequests",
    "path": "/v2/payments/{paymentReference}/refundrequests",
    "method": "GET",
    "description": "Returns all the refund requests details based on payment reference",
    "parameters": [
      {
        "name": "paymentReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Payment Reference"
      }
    ],
    "responses": {
      "200": "Return refund request for the provided payment reference.",
      "400": "Invalid input detail.",
      "404": "Payment not found.",
      "500": "Something went wrong. Please try again."
    },
    "tags": [
      "Payments"
    ]
  },
  {
    "objectID": "POST /v2/payments/{paymentReference}/refundrequests",
    "path": "/v2/payments/{paymentReference}/refundrequests",
    "method": "POST",
    "description": "Allow the merchant to request for refund for provided payment using payment reference.",
    "parameters": [
      {
        "name": "paymentReference",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "Payment Reference"
      },
      {
        "name": "refundRequest",
        "in": "body",
        "required": true,
        "type": "Reference to RefundRequest",
        "description": "Includes information necessary for processing a refund, detailing the amount, reason for refund, and transaction identifiers."
      }
    ],
    "responses": {
      "201": "Refund request is successfully created for the payment.",
      "300": "Duplicate refund request.",
      "400": "Invalid input detail.",
      "403": "Merchant is forbidden to perform this operation.",
      "404": "Payment not found.",
      "500": "Something went wrong. Please try again."
    },
    "tags": [
      "Payments"
    ]
  },
  {
    "objectID": "GET /v2/payments",
    "path": "/v2/payments",
    "method": "GET",
    "description": "Retrieves a list of payment transactions stored in the system. This endpoint supports various query parameters to filter the payments based on specific criteria such as customer reference, date ranges, and transaction types. It provides comprehensive details about each payment, including amounts, dates, and status, to facilitate effective monitoring and management of financial transactions.",
    "parameters": [
      {
        "name": "customerReference",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Unique identifier for the customer, used to fetch specific customer details or perform actions related to the customer."
      },
      {
        "name": "fromProcessedDate",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for filtering the payments based on their processed date. Format should be YYYY-MM-DD."
      },
      {
        "name": "toProcessedDate",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for filtering the payments based on their processed date. Format should be YYYY-MM-DD."
      },
      {
        "name": "settlementDate",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Date when the payment was settled, used for filtering payments. Format should be YYYY-MM-DD."
      },
      {
        "name": "paymentSettlement",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Unique identifier for the payment settlement, used to fetch payments based on settlement details."
      },
      {
        "name": "transactionTypes",
        "in": "query",
        "required": false,
        "type": "array",
        "description": "List of transaction types to filter payments. Expected to be an array of transaction type identifiers."
      },
      {
        "name": "isRecalled",
        "in": "query",
        "required": false,
        "type": "boolean",
        "description": "Boolean flag to filter payments that have been recalled. Use true to filter recalled payments."
      },
      {
        "name": "isRefunded",
        "in": "query",
        "required": false,
        "type": "boolean",
        "description": "Boolean flag to filter payments that have been refunded. Use true to filter refunded payments."
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "The starting index for the list of payments returned by the query. Useful for pagination."
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "The maximum number of payment records to return. Useful for controlling pagination size."
      }
    ],
    "responses": {
      "200": "Return all the payments satisfies the filters.",
      "400": "Invalid get request.",
      "404": "Unable to find the payments by the filters provided.",
      "500": "Something went wrong. Please try again."
    },
    "tags": [
      "Payments"
    ]
  },
  {
    "objectID": "POST /v2/payments",
    "path": "/v2/payments",
    "method": "POST",
    "description": "Perform OneOff payment for a registered customer with customer reference and payment amount",
    "parameters": [
      {
        "name": "request",
        "in": "body",
        "required": true,
        "type": "Reference to PaymentRequest",
        "description": "For making payment for existing customer, use Customer Reference and Payment Amount\r\nFor making card proxy based, use all the fields in the request"
      }
    ],
    "responses": {
      "201": "Payment is processed.",
      "300": "Duplicate merchant unique id.",
      "400": "Invalid input detail.",
      "500": "Something went wrong. Payment may or may not be created."
    },
    "tags": [
      "Payments"
    ]
  },
  {
    "objectID": "GET /v2/requestpays/{requestPayId}",
    "path": "/v2/requestpays/{requestPayId}",
    "method": "GET",
    "description": "Api to get the request pay details",
    "parameters": [
      {
        "name": "requestPayId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Request Pay Identifier"
      }
    ],
    "responses": {
      "200": "Request Pay summary",
      "404": "Request to pay not found.",
      "500": "Unable to get the request payment."
    },
    "tags": [
      "RequestPays"
    ]
  },
  {
    "objectID": "GET /v2/requestpays/{requestPayId}/entries",
    "path": "/v2/requestpays/{requestPayId}/entries",
    "method": "GET",
    "description": "Api to get the request pay entries",
    "parameters": [
      {
        "name": "requestPayId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Request pay identifier"
      }
    ],
    "responses": {
      "200": "List of request pay entries",
      "404": "Request pay not found.",
      "500": "Unable to get the request to pay."
    },
    "tags": [
      "RequestPays"
    ]
  },
  {
    "objectID": "POST /v2/requestpays",
    "path": "/v2/requestpays",
    "method": "POST",
    "description": "This Method will be return to upload request payments as a collection of json and process them",
    "parameters": [
      {
        "name": "requestPayRequest",
        "in": "body",
        "required": true,
        "type": "Reference to RequestPayRequest",
        "description": "Collection of request pay entries inside a container"
      }
    ],
    "responses": {
      "201": "Request to pay created successfully",
      "300": "Duplicate merchant unique id.",
      "400": "Invalid request pay details.",
      "500": "Something went wrong. Request to pay may or may not be created."
    },
    "tags": [
      "RequestPays"
    ]
  }
]